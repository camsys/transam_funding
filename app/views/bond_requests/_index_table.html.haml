:ruby
  table_dom_id = SecureRandom.hex
  show_actions ||= 0


#bond_requests_table_actions.btn-toolbar
  - if show_actions == 1
    = render :partial => "bond_requests/index_actions"

.table-responsive
  %table.table.table-hover{:id => table_dom_id, :data => {:toggle => 'table',
    :card_view => "false",
    :pagination => 'true',
    :show_pagination_switch => 'true',
    :page_list => "[5, 10, 20, 50, 100, 200]",
    :page_size => current_user.num_table_rows,
    :search => 'false',
    :toolbar => "#bond_requests_table_actions",
    :export_types => "['csv', 'txt', 'excel']",
    :show_export => 'true',
    :show_columns => 'true',
    :state_save => 'true',
    :state_save_id_table => "bond_requests_id",
    :state_save_expire => "1y"}, :style => 'width:100%;'}

    %thead
      %tr
        %th.center{:data => {:field => 'checked', :checkbox => 'true'}}
        %th.center{:data => {:visible => 'false'}} Object Key
        %th.center{:data => {:sortable => 'true'}} Organization
        %th.center{:data => {:sortable => 'true', :formatter => 'date_formatter'}} Created
        %th.center{:data => {:sortable => 'true'}} Title
        %th.center{:data => {:sortable => 'true', :formatter => 'currency_formatter'}} Amount
        %th.center{:data => {:sortable => 'true'}} Status

        %th.center{:data => {:sortable => 'true'}} Description
        %th.center{:data => {:sortable => 'true'}} Justification
        %th.center{:data => {:visible => 'false', :sortable => 'true'}} Rejection
        %th.center{:data => {:sortable => 'true'}} Action
    %tbody
      - bond_requests.each do |f|
        %tr{:id => f.object_key, :class => 'action-path'}
          %td{:data => {:field => 'action-cell'}}
          %td.left= f.object_key
          %td.left= f.organization.short_name
          %td.left= f.created_at
          %td.left= f.title
          %td.right= f.amount
          %td.right= f.state.humanize
          %td.left{data: {tableexport: {value: f.description}}}
            %a.transam-popover{data: {placement: 'left', toggle: 'popover', html: 'true', content: f.description}, title: 'Description', tabindex: '0'}
              %i.fa.fa-info-circle
          %td.left{data: {tableexport: {value: f.justification}}}
            %a.transam-popover{data: {placement: 'left', toggle: 'popover', html: 'true', content: f.justification}, title: 'Justification', tabindex: '0'}
              %i.fa.fa-info-circle
          %td.left{data: {tableexport: {value: f.rejection}}}
            %a.transam-popover{data: {placement: 'left', toggle: 'popover', html: 'true', content: f.rejection}, title: 'Rejection', tabindex: '0'}
              %i.fa.fa-info-circle
          %td.center.nowrap{:data => {:field => 'action-cell'}}
            - if f.pending? && (can? :update, f)
              = link_to edit_bond_request_path(f), :class => "button btn-xs", :title => "Edit request" do
                %i.fa.fa-edit.fa-1-5x.text-success
              - if can? :update_status, f
                = link_to new_workflow_event_bond_requests_path(:event => 'reject', :targets => f.object_key), :remote => true, :title => 'Reject request' do
                  %i.fa.fa-fw{:class => get_workflow_event_icon('reject')}

:javascript

  var selected_rows = new Set();

  $(document).ready(function() {

    // Disable the table actions
    enable_disable_table_actions();

    // Add a handler for the print action which appends the selected orders to
    // the href
    $(".selected-action").on('click', function(e) {

      var href = this.href;
      href = href + '&targets=' + Array.from(selected_rows).toString();
      $(this).attr('href', href);
    });
  });

  $('#' + '#{table_dom_id}').on('check.bs.table', function(e, row) {
    update_selected();
  }).on('uncheck.bs.table', function(e, row) {
    update_selected();
  }).on('check-all.bs.table', function(e, row) {
    update_selected();
  }).on('uncheck-all.bs.table', function(e, row) {
    update_selected();
  }).on('sort.bs.table', function(e, name, order) {
    //console.log('Sorting on ' + name + ' dir => ' + order);
    $('#' + '#{table_dom_id}').bootstrapTable('selectPage', 1);
  }).on('load-success.bs.table', function() {
    // Table reloaded, clear saved selection
    selected_rows = new Set();
    enable_disable_table_actions();
  }).on('post-body.bs.table', function () {
    $('.transam-popover').popover({
      trigger: 'hover'
    });

    $('.transam-tooltip').tooltip();
  });

  $('#' + '#{table_dom_id}').on('click', 'td', function () {
    var path = "#{bond_request_path('xxx')}";
    var row = $(this).parent('tr').attr('id');

    if ($(this).attr('data-field') != 'action-cell' && !$(this).hasClass('bs-checkbox')) {
      var url = path.replace("xxx", row);
      document.location.href = url;
    }
  });

  // Enables or disables the package actions depending on how many are selected
  function enable_disable_table_actions() {
    var num = selected_rows.size;
    if (num > 0) {
      $('.selected-action').removeClass('disabled');
    } else {
      $('.selected-action').addClass('disabled');
    }
  };

  // Updates the selected rows in the table
  function update_selected() {
    var selected = $('#' + '#{table_dom_id}').bootstrapTable('getSelections');
    selected_rows = new Set();
    for (i = 0; i < selected.length; i++) {
      //console.log(selected[i]);
      selected_rows.add(selected[i][1]);
    }
    console.log(selected_rows);
    enable_disable_table_actions();
  };

  // Removes an object identified by its object key from the set of objects selected
  function remove_from_selected(object_key) {
    selected_rows.delete(object_key);
    enable_disable_table_actions();
  };

  function pcnt_formatter(value) {
    if (value == "") {
      return value;
    } else {
      return format("##0.000", value) + "%";
    }
  };

  function date_formatter(value) {
    if (value) {
      //console.log(value);
      var date = new Date(value);
      //console.log(date);
      var local_date = convertUTCDateToLocalDate(date);
      //console.log(local_date);
      return local_date.getMonth() + 1 + "/" + local_date.getDate() + "/" + local_date.getFullYear();
    } else {
      return value;
    }
  };

  function convertUTCDateToLocalDate(date) {
      var newDate = new Date(date.getTime()+date.getTimezoneOffset()*60*1000);

      var offset = date.getTimezoneOffset() / 60;
      var hours = date.getHours();

      newDate.setHours(hours - offset);

      return newDate;
  };

  function integer_formatter(value) {
    return format("###,##0.", value);
  };

  function currency_formatter(value) {
    return '$' + integer_formatter(value);
  };



