:ruby
  is_state_user = (current_user.organization.organization_type == OrganizationType.find_by(class_name: 'Grantor'))

  state_owned_federal_buckets = FundingBucket.federal.current(@activity_line_item.fy_year).state_owned(@organization_list)
  state_owned_state_buckets = FundingBucket.state.current(@activity_line_item.fy_year).state_owned(@organization_list)
  state_owned_local_buckets = FundingBucket.local.current(@activity_line_item.fy_year).state_owned(@organization_list)

  agency_buckets = FundingBucket.current(@activity_line_item.fy_year).agency_owned(@organization_list)

  can_edit_federal = true
  can_edit_state = true
  can_edit_local = true

  unless @funding_request.nil?
    unless @funding_request.federal_funding_line_item.nil?
      can_edit_federal = (is_state_user || !state_owned_federal_buckets.include?(@funding_request.federal_funding_line_item) )
    end
    unless @funding_request.state_funding_line_item.nil?
      can_edit_state = (is_state_user || !state_owned_state_buckets.include?(@funding_request.state_funding_line_item) )
    end
    unless @funding_request.local_funding_line_item.nil?
      can_edit_local = (is_state_user || !state_owned_local_buckets.include?(@funding_request.local_funding_line_item) )
    end
  end

= dialog_tag('Funding Request', {:icon => 'fa fa-usd', :class => "form-part"}) do

  .row
    .col-md-12
      = simple_form_for([@project, @activity_line_item, (@funding_request || FundingRequest.new)],
              :html => {:class => 'form-vertical funding_request_form' },
              :wrapper => :horizontal_form,
              :wrapper_mappings => {:check_boxes => :horizontal_radio_and_checkboxes, :radio_buttons => :horizontal_radio_and_checkboxes,
                                    :file => :horizontal_file_input, :boolean => :horizontal_boolean}) do |f|
        .row
          .col-xs-5
            = f.input :funding_request_amount, :wrapper=> :horizontal_prepend, :label => 'Line Amount' do
              %span.input-group-addon
                %i.fa.fa-usd
              = f.input_field :funding_request_amount, :class => "form-control", :required=> true, :digits => true, :min => 1, :max => 1000000000000, :disabled => !(can_edit_federal && can_edit_state && can_edit_local)

          .col-xs-2
          .col-xs-2
            -if (can_edit_federal && can_edit_state && can_edit_local)
              %i.fa.fa-unlock-alt.fa-2x{:id => "locking_option"}
          .col-xs-3

        .row
          .col-xs-7
            -if can_edit_federal
              = f.input :federal_funding_line_item_id, :collection => agency_buckets.federal + (is_state_user ? state_owned_federal_buckets : []), :label => 'Federal Funds', :disabled => !(can_edit_federal)
            -else
              = f.input :federal_funding_line_item_id, :collection => [@funding_request.federal_funding_line_item], :label => 'Federal Funds', :disabled => !(can_edit_federal)

          .col-xs-2
            = f.input :federal_percent, :wrapper=> :horizontal_prepend, :label => false do
              = f.input_field :federal_percent, :class => "form-control", :value => 0, :decimal => true, :min => 0, :max => 100, :disabled => !(can_edit_federal)
              %span.input-group-addon{:id => "federal_percent", :title => "federal_match_percent"}
                %i.fa.fa-percent

          .col-xs-3
            = f.input :federal_amount, :wrapper=> :horizontal_prepend, :label => false do
              %span.input-group-addon
                %i.fa.fa-usd{id: 'federal_amount_usd_symbol'}
              = f.input_field :federal_amount, :class => "form-control", :digits => true, :min => 0, :max => 1000000000000, :disabled => !(can_edit_federal)

        .row
          .col-xs-7
            -if can_edit_state
              = f.input :state_funding_line_item_id, :collection => agency_buckets.state + (is_state_user ? state_owned_state_buckets : []), :label => 'State Funds', :disabled => !(can_edit_state)
            -else
              = f.input :state_funding_line_item_id, :collection => [@funding_request.state_funding_line_item], :label => 'State Funds', :disabled => !(can_edit_state)


          .col-xs-2
            = f.input :state_percent, :wrapper=> :horizontal_prepend, :label => false do
              = f.input_field :state_percent, :class => "form-control", :value => 0, :decimal => true, :min => 0, :max => 100, :disabled => !(can_edit_state)
              %span.input-group-addon{:id => "state_percent", :title => "state_match_percent"}
                %i.fa.fa-percent

          .col-xs-3
            = f.input :state_amount, :wrapper=> :horizontal_prepend, :label => false do
              %span.input-group-addon
                %i.fa.fa-usd{id: 'state_amount_usd_symbol'}
              = f.input_field :state_amount, :class => "form-control", :digits => true, :min => 0, :max => 1000000000000, :disabled => !(can_edit_state)

        .row
          .col-xs-7
            -if can_edit_local
              = f.input :local_funding_line_item_id, :collection => agency_buckets.local + (is_state_user ? state_owned_local_buckets : []), :label => 'Local Funds', :disabled => !(can_edit_local)
            -else
              = f.input :local_funding_line_item_id, :collection => [@funding_request.local_funding_line_item], :label => 'Local Funds', :disabled => !(can_edit_local)


          .col-xs-2
            = f.input :local_percent, :wrapper=> :horizontal_prepend, :label => false do
              = f.input_field :local_percent, :class => "form-control", :value => 0, :decimal => true, :min => 0, :max => 100, :disabled => !(can_edit_local)
              %span.input-group-addon{:id => "local_percent", :title => "local_match_percent"}
                %i.fa.fa-percent

          .col-xs-3
            = f.input :local_amount, :wrapper=> :horizontal_prepend, :label => false do
              %span.input-group-addon
                %i.fa.fa-usd{id: 'local_amount_usd_symbol'}
              = f.input_field :local_amount, :class => "form-control", :number => true, :min => 0, :max => 1000000000000, :disabled => !(can_edit_local)

        .row
          .col-xs-6.left
          .col-xs-1.left{:id => "total_amount_label"}
            Total:
          .col-xs-2
            = f.input :total_percent, :wrapper=> :horizontal_prepend, :label => false do
              = f.input_field :total_percent, :class => "form-control", :decimal => true, :min => 0, :max => 100
              %span.input-group-addon
                %i.fa.fa-percent
          .col-xs-3
            = f.input :total_amount, :wrapper=> :horizontal_prepend, :label => false do
              %span.input-group-addon
                %i.fa.fa-usd
              = f.input_field :total_amount, :class => "form-control", :number => true, :min => 0
        .row
          .col-xs-12
            = f.submit "Save", :class => 'btn btn-primary', :id => 'submit_button'
            %button.btn.btn-default{id: 'cancel_btn'} Cancel

:javascript
  var federal_bucket_budget_remaining = 0;
  var state_bucket_budget_remaining = 0;
  var local_bucket_budget_remaining = 0;

  // jquery validations
  $('.funding_request_form').validate();

  $( "#funding_request_federal_amount" ).rules( "add", {
    FundRequired: true
  });
  $( "#funding_request_state_amount" ).rules( "add", {
    FundRequired: true
  });
  $( "#funding_request_local_amount" ).rules( "add", {
    FundRequired: true
  });

  $.validator.addMethod('FundRequired', function(value, element) {
      var results;

      if (parseInt(value) > 0) {
        // get whether this is federal/state/local
        results = (parseInt($('#funding_request_'+ $(element).attr('id').split('_')[2]+'_funding_line_item_id').val()) > 0);
      } else {
        results = true;
      }

      return this.optional(element) || results ;
  }, "Please enter a fund.");

  var line_item_total = parseFloat($('#funding_request_funding_request_amount').val());

    $('#cancel_btn').click(function(e) {
      e.preventDefault();
      $('#form_panel_body').hide();
      return false;
  });

  function lock_on_load()
  {
    var federal_bucket_name = $('#funding_request_federal_funding_line_item_id option:selected').text();
    var state_bucket_name = $('#funding_request_state_funding_line_item_id option:selected').text();
    var local_bucket_name = $('#funding_request_local_funding_line_item_id option:selected').text();
    if(federal_bucket_name == "")
    {
      lock_federal_funds_and_percent();
    }
    if(state_bucket_name == "")
    {
      lock_state_funds_and_percent();
    }
    if(local_bucket_name == "")
    {
      lock_local_funds_and_percent();
    }
  }

  function get_federal_bucket_name()
  {
    return $('#funding_request_federal_funding_line_item_id option:selected').text();
  }
  function get_state_bucket_name()
  {
    return $('#funding_request_state_funding_line_item_id option:selected').text();
  }
  function get_local_bucket_name()
  {
    return $('#funding_request_local_funding_line_item_id option:selected').text();
  }

  function get_federal_cash()
  {
   return parseFloat($('#funding_request_federal_amount').val());
  }
  function set_federal_cash(federal_cash_value)
  {
    $('#funding_request_federal_amount').val(federal_cash_value);
  }
  function get_state_cash()
  {
    return parseFloat($('#funding_request_state_amount').val());
  }
  function set_state_cash(state_cash_value)
  {
    $('#funding_request_state_amount').val(state_cash_value);
  }
  function get_local_cash()
  {
    return parseFloat($('#funding_request_local_amount').val());
  }
  function set_local_cash(local_cash_value)
  {
    $('#funding_request_local_amount').val(local_cash_value);
  }
  function get_federal_percent()
  {
    var federal_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(parseFloat($('#funding_request_federal_percent').val())));
    if(isNaN(federal_percent)){
      federal_percent = 0;
    }
    return federal_percent;
  }
  function set_federal_percent(federal_percentage)
  {
    $('#funding_request_federal_percent').val((federal_percentage*100).toFixed(3));
  }
  function get_state_percent()
  {
    var state_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(parseFloat($('#funding_request_state_percent').val())));
    if(isNaN(state_percent)){
      state_percent = 0;
    }
    return state_percent;

  }
  function set_state_percent(state_percentage)
  {
    $('#funding_request_state_percent').val((state_percentage*100).toFixed(3));
  }
  function get_local_percent()
  {
    var local_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(parseFloat($('#funding_request_local_percent').val())));
    if(isNaN(local_percent)){
      local_percent = 0;
    }

    return local_percent;
  }
  function set_local_percent(local_percentage)
  {
    $('#funding_request_local_percent').val((local_percentage*100).toFixed(3));
  }
  function convert_non_decimal_percent_to_decimal(non_decimal_percent)
  {
    return non_decimal_percent/100;
  }

  function is_locked()
  {
    return $('#locking_option').hasClass('fa-lock');
  }


  //We want percents to be rounded to three decimal places following the DotGrants Logic so 00.1% is the smalled decimal place we support and it would be 0.001
  function find_percent_down_to_three_decimal_places(number){
    return Math.round(number * 100000)/100000
  }

  function get_percent_from_cash_entered(cash_value){

    var raw_percent = cash_value / line_item_total;
    var percent = find_percent_down_to_three_decimal_places(raw_percent);
    if(isNaN(percent)){
      percent = 0
    }
    return percent.toFixed(5);
  }
  function get_value_from_percent_funding(non_decimalized_percent_funding, percent_type){
    var cash_value = line_item_total * find_percent_down_to_three_decimal_places(non_decimalized_percent_funding);
    var rounded_cash_value = Math.round(cash_value);
    var actual_percent= get_percent_from_cash_entered(rounded_cash_value);

    //if the percent type is federal or state and the calculated percent > expected percent then we want to floor the rounding which should bring us back in line with the expected percent
    if(percent_type != 'local')
    {
      if(actual_percent > non_decimalized_percent_funding)
      {
        rounded_cash_value = Math.floor(cash_value);
      }
    }
    //The state should always pick up the tab for any extra funds.
    else
    {
      if(actual_percent < non_decimalized_percent_funding)
      {
        rounded_cash_value = Math.ceil(cash_value);
      }
    }

    return rounded_cash_value;
  }

  function make_sure_percent_remaining_is_not_less_than_zero(percent_remaining)
  {
    if(percent_remaining < 0)
    {
      percent_remaining = 0;
    }

    return percent_remaining;
  }
  function find_state_percent_after_federal_using_tool_tips(decimalized_percent_funding_ignoring_federal)
  {
    var remainig_percent_after_federal = 1 - get_federal_match_percent_tooltip();
    remainig_percent_after_federal = make_sure_percent_remaining_is_not_less_than_zero(remainig_percent_after_federal)

    var state_percent_after_federal = remainig_percent_after_federal * decimalized_percent_funding_ignoring_federal;
    return state_percent_after_federal;
  }
  function find_state_percent_after_federal(decimalized_percent_funding_ignoring_federal)
  {
    var remainig_percent_after_federal = 1 - get_federal_percent();
    remainig_percent_after_federal = make_sure_percent_remaining_is_not_less_than_zero(remainig_percent_after_federal);

    var state_percent_after_federal = remainig_percent_after_federal * decimalized_percent_funding_ignoring_federal;
    return state_percent_after_federal;
  }
  function update_cash_value_and_percent_funding_for_state_from_match_percent_taking_federal_percent_into_account(decimalized_percent_funding_ignoring_federal){
    var state_percent_after_federal = find_state_percent_after_federal(decimalized_percent_funding_ignoring_federal);

    set_state_percent(state_percent_after_federal);
    update_state_cash_from_state_percent();
  }

  function find_local_percent_after_federal_and_state_using_tool_tips(decimalized_percent_funding_ignoring_federal_and_local)
  {
    var percent_remaining = 1 - (get_federal_match_percent_tooltip() + get_state_match_percent_tooltip());
    percent_remaining = make_sure_percent_remaining_is_not_less_than_zero(percent_remaining);

    var local_percent_after_federal_and_state = percent_remaining * decimalized_percent_funding_ignoring_federal_and_local;
    return local_percent_after_federal_and_state;
  }
  function find_local_percent_after_federal_and_state(decimalized_percent_funding_ignoring_federal_and_local)
  {
    var percent_remaining = 1 - (get_federal_percent() + get_state_percent());
    percent_remaining = make_sure_percent_remaining_is_not_less_than_zero(percent_remaining);

    var local_percent_after_federal_and_state = percent_remaining * decimalized_percent_funding_ignoring_federal_and_local;
    return local_percent_after_federal_and_state;
  }
  function update_cash_value_and_percent_funding_for_local_from_match_percent_taking_federal_and_state_percent_into_account(decimalized_percent_funding_ignoring_federal_and_local){
    var local_percent_after_federal_and_state = find_local_percent_after_federal_and_state(decimalized_percent_funding_ignoring_federal_and_local);

    set_local_percent(local_percent_after_federal_and_state);
    update_local_cash_from_local_percent();
  }

  function update_total_funds(){
    var federal_cash = get_federal_cash();
    var state_cash = get_state_cash();
    var local_cash = get_local_cash();

    if(isNaN(federal_cash)){
      federal_cash = 0;
    }
    if(isNaN(state_cash)){
      state_cash = 0;
    }
    if(isNaN(local_cash)){
      local_cash = 0;
    }

    var total = federal_cash + state_cash + local_cash;
    $('#funding_request_total_amount').val(total);
    $('#funding_request_total_amount').attr('readonly', true);
  }
  function update_total_percents(){
  //   var amount_requested = parseFloat($('#funding_request_funding_request_amount').val());
  //   var federal_cash = get_federal_cash();
  //   var state_cash = get_state_cash();
  //   var local_cash = get_local_cash();

    var federal_percent = get_federal_percent();
    var state_percent = get_state_percent();
    var local_percent = get_local_percent();
    var total = federal_percent + state_percent + local_percent;

    $('#funding_request_total_percent').val((total*100).toFixed(3));
    $('#funding_request_total_percent').attr('readonly', true);
  }
  function update_bucket_budget_remaining_totals()
  {
    if(get_federal_cash() > federal_bucket_budget_remaining)
    {
      $( "#federal_amount_usd_symbol" ).removeClass("fa fa-usd").addClass("fa fa-usd text-danger");
      $('#federal_amount_usd_symbol').prop('title', 'The bucket is or will be overdrawn.');
    } else {
      $( "#federal_amount_usd_symbol" ).removeClass( "fa fa-usd text-danger" ).addClass( "fa fa-usd" );
      $('#federal_amount_usd_symbol').prop('title', 'The bucket is not overdrawn');
    }
    if(get_state_cash() > state_bucket_budget_remaining)
    {
      $( "#state_amount_usd_symbol" ).removeClass("fa fa-usd").addClass("fa fa-usd text-danger");
      $('#state_amount_usd_symbol').prop('title', 'The bucket is or will be overdrawn.');
    } else {
      $( "#state_amount_usd_symbol" ).removeClass( "fa fa-usd text-danger" ).addClass( "fa fa-usd" );
      $('#state_amount_usd_symbol').prop('title', 'The bucket is not overdrawn');
    }

    if(get_local_cash() > local_bucket_budget_remaining)
    {
      $( "#local_amount_usd_symbol" ).removeClass( "fa fa-usd text-danger" ).addClass( "fa fa-usd text-danger" );
      $('#local_amount_usd_symbol').prop('title', 'The bucket is or will be overdrawn.');
    } else {
      $( "#local_amount_usd_symbol" ).removeClass( "fa fa-usd text-danger" ).addClass( "fa fa-usd" );
      $('#local_amount_usd_symbol').prop('title', 'The bucket is not overdrawn');
    }
  }

  function update_totals(){
    update_total_funds();
    update_total_percents();
    update_bucket_budget_remaining_totals();
  }

  function round_amounts_and_percentages(amount_requested, federal_cash, state_cash, local_cash, federal_percent){
    //Compare Total to the Sum of State, Federal, and Local Amounts
    //If amounts do not match, adjust in Fed first, Local second
    var actual_total = federal_cash+state_cash+local_cash
    if(amount_requested != actual_total)
    {
      var difference_between_actual_and_requested = actual_total - amount_requested;
      if(federal_percent > 0){
        set_federal_cash(federal_cash - difference_between_actual_and_requested);
        update_federal_percent_from_federal_cash();
      }else
      {
        set_local_cash(local_cash - difference_between_actual_and_requested);
        update_local_percent_from_local_cash
      }
    }

  }


  function lock_form(){
    lock_federal_percent();
    lock_state_percent();
    lock_local_percent();
    $( "#locking_option" ).removeClass( "fa fa-unlock-alt fa-2x text-success" ).addClass( "fa fa-lock fa-2x text-danger" );

  }
  function unlock_form(){
    unlock_federal_percent();
    unlock_state_percent();
    unlock_local_percent();
    $( "#locking_option" ).removeClass( "fa fa-lock fa-2x text-danger" ).addClass( "fa fa-unlock-alt fa-2x" );
    lock_on_load();
  }

  function lock_federal_percent(){
    $('#funding_request_federal_percent').attr('readonly', true);
  }
  function lock_state_percent(){
    $('#funding_request_state_percent').attr('readonly', true);
  }
  function lock_local_percent(){
    $('#funding_request_local_percent').attr('readonly', true);
  }
  function unlock_federal_percent(){
    $('#funding_request_federal_percent').removeAttr('readonly');
  }
  function unlock_state_percent(){
    $('#funding_request_state_percent').removeAttr('readonly');
  }
  function unlock_local_percent(){
    $('#funding_request_local_percent').removeAttr('readonly');
  }

  function lock_federal_funds_and_percent(){
    $('#funding_request_federal_amount').attr('readonly', true);
    lock_federal_percent();
  }
  function lock_state_funds_and_percent(){
    $('#funding_request_state_amount').attr('readonly', true);
    lock_state_percent();
  }
  function lock_local_funds_and_percent(){
    $('#funding_request_local_amount').attr('readonly', true);
    lock_local_percent();
  }
  function unlock_federal_funds_and_percent(){
    $('#funding_request_federal_amount').removeAttr('readonly');
    unlock_federal_percent();
  }
  function unlock_state_funds_and_percent(){
    $('#funding_request_state_amount').removeAttr('readonly');
    unlock_state_percent();
  }
  function unlock_local_funds_and_percent(){
    $('#funding_request_local_amount').removeAttr('readonly');
    unlock_local_percent();
  }


  function update_federal_percent_from_federal_cash(){
    var federal_percent = get_percent_from_cash_entered(get_federal_cash());
    //todo clean this up
    set_federal_percent(federal_percent);
    update_total_percents();
  }
  function update_state_percent_from_state_cash(){
    var state_percent = get_percent_from_cash_entered(get_state_cash());
    set_state_percent(state_percent);
    update_total_percents();
  }
  function update_local_percent_from_local_cash(){
    var local_percent = get_percent_from_cash_entered(get_local_cash());
    set_local_percent(local_percent);
    update_total_percents();
  }

  function update_federal_cash_from_federal_percent(){
    var current_federal_percent = get_federal_percent();
    //todo clean this up
    var federal_cash = get_value_from_percent_funding(current_federal_percent, 'federal');
    federal_cash = apply_federal_rounding_rules(federal_cash);

    set_federal_cash(federal_cash);

    update_federal_percent_from_federal_cash();
  }
  function update_state_cash_from_state_percent(){
    var current_state_percent = get_state_percent();
    var state_cash = get_value_from_percent_funding(current_state_percent, 'state');
    state_cash = apply_state_rounding_rules(state_cash);
    set_state_cash(state_cash);
    update_state_percent_from_state_cash();
  }
  function update_local_cash_from_local_percent(){
    var current_local_percent = get_local_percent();
    var local_cash = get_value_from_percent_funding(current_local_percent, 'local');
    local_cash = apply_local_rounding_rules(local_cash);
    set_local_cash(local_cash);
    update_local_percent_from_local_cash(local_cash);
  }

  function apply_federal_rounding_rules(cash){
    return cash.toFixed(0);
  }

  function apply_state_rounding_rules(cash){
    return cash.toFixed(0);
  }

  function apply_local_rounding_rules(cash){
    return cash.toFixed(0);
  }

  function set_new_funding_request_adjusted_from_new_line_item_amount(funding_line_amount, percent)
  {
      line_item_total = ((funding_line_amount/(percent*100))*100).toFixed(0)
      $('#funding_request_funding_request_amount').val(line_item_total);
      change_funding_request_amount();
  }

  function change_funding_request_amount()
  {
    var are_percents_locked = is_locked();
    //if the values have changed we need to update the percent based on what has been filled in for provided cash from buckets
    if(!are_percents_locked)
    {
      update_federal_percent_from_federal_cash();
      update_state_percent_from_state_cash();
      update_local_percent_from_local_cash();
      update_totals();
    }else if (are_percents_locked)
    {
      update_federal_cash_from_federal_percent();
      update_state_cash_from_state_percent();
      update_local_cash_from_local_percent();
      update_totals();
    }
  }

  function first_load(){
    lock_on_load();
    update_totals();
    var requested_amount = parseFloat($('#funding_request_funding_request_amount').val());
    if(requested_amount == 0)
    {
      line_item_total = parseInt('#{@activity_line_item.funds_required}');
      if(line_item_total > 0)
      {
        $('#funding_request_funding_request_amount').val(line_item_total);
      }else{
        $('#funding_request_funding_request_amount').val(1);
      }
    }

    get_bucket_amount_remaining_and_template_match_percent_for_tool_tip($('#funding_request_federal_funding_line_item_id option:selected').text(), 'federal', get_federal_cash());
    get_bucket_amount_remaining_and_template_match_percent_for_tool_tip($('#funding_request_state_funding_line_item_id option:selected').text(), 'state', get_state_cash());
    get_bucket_amount_remaining_and_template_match_percent_for_tool_tip($('#funding_request_local_funding_line_item_id option:selected').text(), 'local', get_local_cash());
  }

  function get_federal_match_percent_tooltip(match)
  {
    var federa_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(parseFloat($('#federal_percent').prop('title'))));
    if(isNaN(federa_percent)){
      federa_percent = 0;
    }

    return federa_percent;
  }
  function set_federal_match_percent_tooltip(match)
  {
    $('#federal_percent').prop('title', (match*100).toFixed(3)+'%');
  }
  function get_state_match_percent_tooltip(match)
  {
    var state_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(parseFloat($('#state_percent').prop('title'))));
    if(isNaN(state_percent)){
      state_percent = 0;
    }

    return state_percent;
  }
  function set_state_match_percent_tooltip(match)
  {
    $('#state_percent').prop('title', (match*100).toFixed(3)+'%');
  }
  function get_local_match_percent_tooltip(match)
  {
    var local_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(parseFloat($('#local_percent').prop('title'))));
    if(isNaN(local_percent)){
      local_percent = 0;
    }

    return local_percent;
  }
  function set_local_match_percent_tooltip(match)
  {
    $('#local_percent').prop('title', (match*100).toFixed(3)+'%');
  }

  function update_state_and_local_percent_match()
  {
    var state_bucket_name = get_state_bucket_name();
    if(state_bucket_name != "")
    {
      get_bucket_amount_remaining_and_template_match_percent_for_tool_tip(state_bucket_name, 'state', 0)
    }
    update_local_percent_match()
  }

  function update_local_percent_match()
  {
    var local_bucket_name = get_local_bucket_name();
    if(local_bucket_name != "")
    {
      get_bucket_amount_remaining_and_template_match_percent_for_tool_tip(local_bucket_name, 'local', 0)
    }
  }

  $('#locking_option').click(function(){
    var total_percent = $('#funding_request_total_percent').val();

    var is_disabled = is_locked();
    if(is_disabled){
      unlock_form();
    }else{
      lock_form();
    }
  });

  $('#funding_request_funding_request_amount').change(function(){
    line_item_total = parseFloat($('#funding_request_funding_request_amount').val());
    change_funding_request_amount();
  });

  $('#funding_request_federal_amount').change(function(){
    var are_percents_locked = is_locked();
    if(are_percents_locked){
     set_new_funding_request_adjusted_from_new_line_item_amount(get_federal_cash(), get_federal_percent())
    }else {
      update_federal_percent_from_federal_cash();
      update_totals();
    }
  });
  $('#funding_request_state_amount').change(function(){
    var are_percents_locked = is_locked();
    if(are_percents_locked){
      set_new_funding_request_adjusted_from_new_line_item_amount(get_state_cash(), get_state_percent())
    }else {
      update_state_percent_from_state_cash();
      update_totals();
    }
  });
  $('#funding_request_local_amount').change(function(){
    var are_percents_locked = is_locked();
    if(are_percents_locked){
      set_new_funding_request_adjusted_from_new_line_item_amount(get_local_cash(), get_local_percent())
    }else {
      update_local_percent_from_local_cash();
      update_totals();
    }
  });
  $('#funding_request_federal_percent').change(function(){
    update_federal_cash_from_federal_percent();
    update_totals();
  });
  $('#funding_request_state_percent').change(function(){
    update_state_cash_from_state_percent();
    update_totals();
  });
  $('#funding_request_local_percent').change(function(){
    update_local_cash_from_local_percent();
    update_totals();
  });

  $('#funding_request_federal_funding_line_item_id').change(function(){
    var federal_request_amount = get_federal_cash();
    var bucket_name = $('#funding_request_federal_funding_line_item_id option:selected').text()
    if(federal_request_amount == 0)
    {
      if(bucket_name == ""){
        set_federal_cash(0);
        set_federal_percent(0);
        update_totals();
        lock_federal_funds_and_percent();
        federal_bucket_budget_remaining = 0;
      }
      else{
        get_bucket_percent(bucket_name, 'federal');
        update_state_and_local_percent_match();
        if(!is_locked()){
          unlock_federal_funds_and_percent();
        }
      }
    }else{
      if(bucket_name == ""){
        set_federal_cash(0);
        set_federal_percent(0);
        update_totals();
        lock_federal_funds_and_percent();
        federal_bucket_budget_remaining = 0;
      }else{
        var percent_complete = get_percent_from_cash_entered(federal_request_amount);
        set_federal_percent(percent_complete);
        if(!is_locked()){
          unlock_federal_funds_and_percent();
        }
        get_bucket_amount_remaining_and_template_match_percent_for_tool_tip(bucket_name, 'federal', 0);
        update_state_and_local_percent_match();
      }
    }
  });

  $('#funding_request_state_funding_line_item_id').change(function(){
    var state_request_amount = get_state_cash();
    var bucket_name = $('#funding_request_state_funding_line_item_id option:selected').text()
    if(state_request_amount == 0)
    {
      if(bucket_name == ""){
        set_state_cash(0);
        set_state_percent(0);
        update_totals();
        lock_state_funds_and_percent();
        state_bucket_budget_remaining = 0;
      }
      else{
        get_bucket_percent($('#funding_request_state_funding_line_item_id option:selected').text(), 'state');
        update_local_percent_match();
        if(!is_locked()){
          unlock_state_funds_and_percent();
        }

      }
    }else{
      var percent_complete = get_percent_from_cash_entered(state_request_amount);
      set_state_percent(percent_complete);
      if(bucket_name == ""){
        set_state_cash(0);
        set_state_percent(0);
        update_totals();
        lock_state_funds_and_percent();
        state_bucket_budget_remaining = 0;
      }else
      {
        if(!is_locked()){
          unlock_state_funds_and_percent();
        }
        get_bucket_amount_remaining_and_template_match_percent_for_tool_tip(bucket_name, 'state', 0);
        update_local_percent_match();
      }
    }
  });

  $('#funding_request_local_funding_line_item_id').change(function(){
    var local_request_amount = get_local_cash();
    var bucket_name = $('#funding_request_local_funding_line_item_id option:selected').text()
    if(local_request_amount == 0)
    {
      if(bucket_name == ""){
        set_local_cash(0);
        set_local_percent(0);
        update_totals();
        lock_local_funds_and_percent();
        local_bucket_budget_remaining = 0;
      }
      else{
        get_bucket_percent($('#funding_request_local_funding_line_item_id option:selected').text(), 'local');
        if(!is_locked()){
          unlock_local_funds_and_percent();
        }
      }
    }else{
      var percent_complete = get_percent_from_cash_entered(local_request_amount);
      set_local_percent(percent_complete);
      if(bucket_name == ""){
        set_local_cash(0);
        set_local_percent(0);
        update_totals();
        lock_local_funds_and_percent();
        local_bucket_budget_remaining = 0;
      }else{
        if(!is_locked()){
          unlock_local_funds_and_percent();
        }
        get_bucket_amount_remaining_and_template_match_percent_for_tool_tip(bucket_name, 'local', 0);
      }
    }
  });


  function get_bucket_percent(bucket_name, source)
  {
    var url = '#{find_expected_match_percent_funding_buckets_path}';
    $.ajax({
      url: url,
      data: {bucket_name: bucket_name},
      success: function(result){
        var cash_value = 0;
        if(source == 'federal')
        {
          federal_bucket_budget_remaining = result.bucket_budget_remaining;
          var percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(result.bucket_percent))
          cash_value = get_value_from_percent_funding(percent);
          set_federal_percent(percent);
          set_federal_cash(cash_value);
          set_federal_match_percent_tooltip(percent);
        }else if(source == 'state')
        {
          state_bucket_budget_remaining = result.bucket_budget_remaining;

          var decimalized_state_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(result.bucket_percent));
          set_state_match_percent_tooltip(find_state_percent_after_federal_using_tool_tips(decimalized_state_percent));
          update_cash_value_and_percent_funding_for_state_from_match_percent_taking_federal_percent_into_account(decimalized_state_percent);
        }else if(source == 'local')
        {
          local_bucket_budget_remaining = result.bucket_budget_remaining;
          var decimalized_local_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(result.bucket_percent));
          set_local_match_percent_tooltip(find_local_percent_after_federal_and_state_using_tool_tips(decimalized_local_percent));
          update_cash_value_and_percent_funding_for_local_from_match_percent_taking_federal_and_state_percent_into_account(decimalized_local_percent);
        }
        update_totals();
      },
      error: function (xhr, ajaxOptions, thrownError) {
        alert("We are sorry but something went wrong. " + xhr.status + " " + thrownError);
      }
    });

   update_totals();
  }

  function get_bucket_amount_remaining_and_template_match_percent_for_tool_tip(bucket_name, source, add_funds_on_load)
  {
    var url = '#{find_expected_match_percent_funding_buckets_path}';
    $.ajax({
      url: url,
      data: {bucket_name: bucket_name},
      success: function(result){
        if(source == 'federal')
        {
          var decimalized_federal_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(result.bucket_percent));
          set_federal_match_percent_tooltip(decimalized_federal_percent);
          federal_bucket_budget_remaining = parseInt(result.bucket_budget_remaining) + add_funds_on_load;
        }else if(source == 'state')
        {
          var decimalized_state_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(result.bucket_percent));
          set_state_match_percent_tooltip(find_state_percent_after_federal_using_tool_tips(decimalized_state_percent));
          state_bucket_budget_remaining = parseInt(result.bucket_budget_remaining) + add_funds_on_load;
        }else if(source == 'local')
        {
          var decimalized_local_percent = find_percent_down_to_three_decimal_places(convert_non_decimal_percent_to_decimal(result.bucket_percent));
          set_local_match_percent_tooltip(find_local_percent_after_federal_and_state_using_tool_tips(decimalized_local_percent));
          local_bucket_budget_remaining = parseInt(result.bucket_budget_remaining) + add_funds_on_load;
        }
        update_totals();
      },
      error: function (xhr, ajaxOptions, thrownError) {
        alert("We are sorry but something went wrong. " + xhr.status + " " + thrownError);
      }
    });
      update_totals();
  }


  first_load();
