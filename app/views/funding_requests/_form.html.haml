.row
  .col-md-12
    = render 'funding_requests/funding_messages'

  .col-md-8
    = simple_form_for([@project, @activity_line_item, (@funding_request || FundingRequest.new)],
            :wrapper => :horizontal_form,
            :wrapper_mappings => {:check_boxes => :horizontal_radio_and_checkboxes, :radio_buttons => :horizontal_radio_and_checkboxes, :file => :horizontal_file_input, :boolean => :horizontal_boolean}) do |f|
      .row
        .col-xs-5
          = f.input :funding_request_amount, :wrapper=> :horizontal_prepend, :label => 'Line Amount' do
            %span.input-group-addon
              %i.fa.fa-usd
            = f.input_field :funding_request_amount, :class => "form-control", :digits => true, :min => 0, :max => 10000000

        .col-xs-2
        .col-xs-2
          %i.fa.fa-unlock-alt.fa-2x
          -#%i.fa.fa-lock.fa-2x
        .col-xs-3
      .row
        .col-xs-7
          -#TODO The fisal year check isn't right. It should actuall be @activity_line_item.fy_year <= bucket.fiscal_year+funding_source.life_in_years AND  @activity_line_item.fy_year >= bucket
          = f.input :federal_funding_line_item_id, :collection => FundingBucket.federal.where(owner_id: @organization_list, fiscal_year: @activity_line_item.fy_year), :label => 'Federal Funds'

        .col-xs-2
          = f.input :federal_percent, :wrapper=> :horizontal_prepend, :label => false do
            = f.input_field :federal_percent, :class => "form-control", :digits => true, :min => 0, :max => 100
            %span.input-group-addon
              %i.fa.fa-percent

        .col-xs-3
          = f.input :federal_amount, :wrapper=> :horizontal_prepend, :label => false do
            %span.input-group-addon
              %i.fa.fa-usd
            = f.input_field :federal_amount, :class => "form-control", :digits => true, :min => 0, :max => 10000000

      .row
        .col-xs-7
          = f.input :state_funding_line_item_id, :collection => FundingBucket.state.where(owner_id: @organization_list, fiscal_year: @activity_line_item.fy_year), :label => 'State Funds'

        .col-xs-2
          = f.input :state_percent, :wrapper=> :horizontal_prepend, :label => false do
            = f.input_field :state_percent, :class => "form-control", :digits => true, :min => 0, :max => 100
            %span.input-group-addon
              %i.fa.fa-percent

        .col-xs-3
          = f.input :state_amount, :wrapper=> :horizontal_prepend, :label => false do
            %span.input-group-addon
              %i.fa.fa-usd
            = f.input_field :state_amount, :class => "form-control", :digits => true, :min => 0, :max => 10000000

      .row
        .col-xs-7
          = f.input :local_funding_line_item_id, :collection => FundingBucket.local.where(owner_id: @organization_list, fiscal_year: @activity_line_item.fy_year), :label => 'Local Funds'

        .col-xs-2
          = f.input :local_percent, :wrapper=> :horizontal_prepend, :label => false do
            = f.input_field :local_percent, :class => "form-control", :digits => true, :min => 0, :max => 100
            %span.input-group-addon
              %i.fa.fa-percent

        .col-xs-3
          = f.input :local_amount, :wrapper=> :horizontal_prepend, :label => false do
            %span.input-group-addon
              %i.fa.fa-usd
            = f.input_field :local_amount, :class => "form-control", :number => true, :min => 0
      .row
        .col-xs-6.left
        .col-xs-1.left{:id => "total_amount_label"}
          Total:
        .col-xs-2{:id => "total_percent"}
          0%
        .col-xs-3{:id => "total_amount"}
          $0
      .row
        .col-xs-3
          .col-xs-offset-3.col-xs-3
            = f.submit "Add", :class => 'btn btn-primary', :id => 'submit_button'

    .col-md-4#federal_fund_details

:javascript
  var line_item_total = parseFloat($('#funding_request_funding_request_amount').val());


  function get_percent_from_cash_entered(cash_value)
  {
    var percent = (cash_value / line_item_total) * 100;
    return percent;
  }
  function get_value_from_percent_funding(percent_funding){
    var cash_value = line_item_total * (percent_funding/100)
    return cash_value.toFixed(2);
  }
  function get_value_from_percent_funding_for_state(percent_funding){
    var federal_cash = parseFloat($('#funding_request_federal_amount').val());
    var cash_value = (line_item_total - federal_cash) * (percent_funding/100)
  }
  function get_value_from_percent_funding_for_state(percent_funding){
    var federal_cash = parseFloat($('#funding_request_federal_amount').val());
    var cash_value = (line_item_total - federal_cash) * (percent_funding/100)
  }



  function update_total_funds(){
    var federal_cash = parseFloat($('#funding_request_federal_amount').val());
    var state_cash = parseFloat($('#funding_request_state_amount').val());
    var local_cash = parseFloat($('#funding_request_local_amount').val());

    if(isNaN(federal_cash)){
      federal_cash = 0
    }
    if(isNaN(state_cash)){
      state_cash = 0
    }
    if(isNaN(local_cash)){
      local_cash = 0
    }

    var total = federal_cash + state_cash + local_cash
    $('#total_amount').text('$'+total);
  }

  function update_total_percents(){
    var federal_percent = parseFloat($('#funding_request_federal_percent').val());
    var state_percent = parseFloat($('#funding_request_state_percent').val());
    var local_percent = parseFloat($('#funding_request_local_percent').val());

    if(isNaN(federal_percent)){
      federal_percent = 0
    }
    if(isNaN(state_percent)){
      state_percent = 0
    }
    if(isNaN(local_percent)){
      local_percent = 0
    }

    var total = federal_percent + state_percent + local_percent
    $('#total_percent').text(total+'%');

    if(total >= 100){
    //  Allow the user to lock the form
    }
  }

  function update_totals(){
    update_total_funds();
    update_total_percents();
  }

  function lock_form(){

  }
  function unlock_form(){

  }


  function update_federal_percent_from_federal_cash(){
    var federal_percent = get_percent_from_cash_entered(parseFloat($('#funding_request_federal_amount').val()));
    $('#funding_request_federal_percent').val(federal_percent);
  }
  function update_state_percent_from_state_cash(){
    var state_percent = get_percent_from_cash_entered(parseFloat($('#funding_request_state_amount').val()));
    $('#funding_request_state_percent').val(state_percent);
  }
  function update_local_percent_from_local_cash(){
    var local_percent = get_percent_from_cash_entered(parseFloat($('#funding_request_local_amount').val()));
    $('#funding_request_local_percent').val(local_percent);
  }
  function update_federal_cash_from_federal_percent(){
    var federal_cash = get_value_from_percent_funding(parseFloat($('#funding_request_federal_percent').val()));
    $('#funding_request_federal_amount').val(federal_cash);
  }
  function update_state_cash_from_state_percent(){
    var state_cash = get_value_from_percent_funding(parseFloat($('#funding_request_state_percent').val()));
    $('#funding_request_state_amount').val(state_cash);
  }
  function update_local_cash_from_local_percent(){
    var local_cash = get_value_from_percent_funding(parseFloat($('#funding_request_local_percent').val()));
    $('#funding_request_local_amount').val(local_cash);
  }


  $('#funding_request_funding_request_amount').change(function(){
    var old_lit = line_item_total;
    line_item_total = parseFloat($('#funding_request_funding_request_amount').val());

    //if the values have changed we need to update the percent based on what has been filled in for provided cash from buckets
    if(old_lit != line_item_total)
    {
      update_federal_percent_from_federal_cash();
      update_state_percent_from_state_cash();
      update_local_percent_from_local_cash();
      update_totals();
    }
  });

  $('#funding_request_federal_amount').change(function(){
    update_federal_percent_from_federal_cash();
    update_totals();
  });
  $('#funding_request_state_amount').change(function(){
    update_state_percent_from_state_cash();
    update_totals();
  });
  $('#funding_request_local_amount').change(function(){
    update_local_percent_from_local_cash();
    update_totals();
  });
  $('#funding_request_federal_percent').change(function(){
    update_federal_cash_from_federal_percent();
    update_totals();
  });
  $('#funding_request_state_percent').change(function(){
    update_state_cash_from_state_percent();
    update_totals();
  });
  $('#funding_request_local_percent').change(function(){
    update_local_cash_from_local_percent();
    update_totals();
  });

  $('#funding_request_federal_funding_line_item_id').change(function(){
    var federal_request_amount = parseFloat($('#funding_request_federal_amount').val());
    if(federal_request_amount == 0)
    {
      get_bucket_percent($('#funding_request_federal_funding_line_item_id option:selected').text(), 'federal');
    }else{
      var percent_complete = get_percent_from_cash_entered(federal_request_amount);
      $('#funding_request_federal_percent').val(percent_complete);
    }
  });

  $('#funding_request_state_funding_line_item_id').change(function(){
    var federal_request_amount = parseFloat($('#funding_request_state_amount').val());
    if(federal_request_amount == 0)
    {
      get_bucket_percent($('#funding_request_state_funding_line_item_id option:selected').text(), 'state');
    }else{
      var percent_complete = get_percent_from_cash_entered(federal_request_amount);
      $('#funding_request_federal_percent').val(percent_complete);
    }
  });

    $('#funding_request_local_funding_line_item_id').change(function(){
    var federal_request_amount = parseFloat($('#funding_request_local_amount').val());
    if(federal_request_amount == 0)
    {
      get_bucket_percent($('#funding_request_local_funding_line_item_id option:selected').text(), 'local');
    }else{
      var percent_complete = get_percent_from_cash_entered(federal_request_amount);
      $('#funding_request_federal_percent').val(percent_complete);
    }
  });

  $(document).ready(function() {
      // Disable the submit button
      //$('#submit_button').attr("disabled", "disabled");
      // Add an event listener on the selector
      $('#funding_request_federal_funding_line_item_id').change(function() {
        var val = $('#funding_request_federal_funding_line_item_id').val();
        var url = '/funding_sources/details/?funding_line_item_id=' + val;
        transam.ajax_render_action(url, 'get');
        $('#federal_fund_details').html("");
      });
  });


  function get_bucket_percent(bucket_name, source)
  {
    var percent = 0;
    var url = '#{find_expected_match_percent_funding_buckets_path}';
    $.ajax({
      url: url,
      data: {bucket_name: bucket_name},
      success: function(result){
        var cash_value = 0;
        if(source == 'federal')
        {
          get_value_from_percent_funding(result);
        }else if(source == 'state')
        {
          get_value_from_percent_funding_for_state(result);
        }else if(source == 'local')
        {
          result = 100 - (parseFloat($('#funding_request_federal_percent').val()) + parseFloat($('#funding_request_state_percent').val()));
          get_value_from_percent_funding(result);
        }
        $('#funding_request_federal_percent').val(result);
        $('#funding_request_federal_amount').val(cash_value);
        update_totals();
      },
      error: function (xhr, ajaxOptions, thrownError) {
        alert("We are sorry but something went wrong. " + xhr.status + " " + thrownError);
      }
    });

   update_totals();
  }