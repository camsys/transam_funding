= simple_form_for(@funding_bucket,
      :html => {:class => 'form-vertical funding_bucket_form' },
      :url => @funding_bucket.new_record? ? create_bucket_app_funding_buckets_path : update_bucket_app_funding_bucket_path,
      :wrapper => :vertical_form,
      :wrapper_mappings => {:check_boxes => :vertical_radio_and_checkboxes, :radio_buttons => :vertical_radio_and_checkboxes, :file => :vertical_file_input, :boolean => :vertical_boolean}) do |f|

  = f.association :funding_template, :required => true, :collection => FundingTemplate.get_templates_for_agencies(@organization_list), :include_blank => true, :label => "Program", :disabled => !@funding_bucket.new_record?

  - if @organization_list.count > 1
    = f.association :owner, :required => true, :collection => @funding_bucket.new_record? ? [] : [[Organization.find_by(id: @funding_bucket.owner_id).coded_name, @funding_bucket.owner_id]], :selected => @funding_bucket.new_record? ? '' : @funding_bucket.owner_id, :label_method => "first", :include_blank => true, :label => "Owner", :disabled => !@funding_bucket.new_record?

  = f.input :description

  .row
    .col-sm-6
      = f.input :fy_year, :required => true, :collection => get_fiscal_years, :label => get_fiscal_year_label
    .col-sm-6
      = f.input :budget_amount, :wrapper => :vertical_append, :label => "Budget" do
        %span.input-group-addon
          %i.fa.fa-usd
        = f.input_field :budget_amount, :class => "form-control", :required => true, :min => 1, :integer => true, :value => @funding_bucket.new_record? ? nil : @funding_bucket.budget_amount.to_i

  = f.input :name, :as => :text, :label=> 'Bucket Name', :required => true

  = f.button :submit, 'Save', :class => "btn btn-primary"

:javascript

  var multiple_years = false;
  var multiple_agencies = false;
  var multiple_buckets_for_agency_year = false;
  var restricted = false;
  show_hide_bucket_name();

  // jquery validations
  $('.funding_bucket_form').validate({
    submitHandler: function(form) {
      form.submit();
    }
  });

  $( "#funding_bucket_name" ).rules( "add", {
    remote: {
      url: '#{is_bucket_name_unique_funding_buckets_path}',
      type: "get",
      data: {
        bucket_name: function() {
          return $('#funding_bucket_name').val();
        }
      }
    },
    messages: {
      remote: "This bucket name is not unique. Please update the name and resubmit."
    }
  });

  $.extend($.validator.messages, {
    integer: 'Please enter a whole number greater than or equal to 1.',
    min: 'Please enter a whole number greater than or equal to 1.'
  });

  $('#funding_bucket_funding_template_id').change(function(){
    if ($('#funding_bucket_funding_template_id').val() > 0)
    {
      var url = '#{find_organizations_from_template_id_funding_buckets_path}';
      $.ajax({
        url: url,
        data: {template_id: $('#funding_bucket_funding_template_id').val()},
        success: function(result){
          console.log(result);
          $('#funding_bucket_owner_id').empty();
          //Add a blank entry to the list.
          $("#funding_bucket_owner_id").append( $("<option></option>").attr("value", "").text(''));
          for(i = 0;i<result.length;i++){
            //add an option for each organizations available to the tempalte
            $("#funding_bucket_owner_id").append(
                $("<option></option>").attr("value", result[i][0]).text(result[i][1])
            );
          }
        },
        error: function (xhr, ajaxOptions, thrownError) {
          alert("We are sorry but something went wrong. " + xhr.status + " " + thrownError);
          }
        });

        set_bucket_configuration_from_template($('#funding_bucket_funding_template_id').val(),update_bucket_name);
    }else{
      $('#funding_bucket_owner_id').empty();
    }
  });

  $('#funding_bucket_owner_id').change(function(){
    update_bucket_name();
  });
  $('#funding_bucket_fy_year').change(function(){
    update_bucket_name();
  });

  function update_bucket_name(){
    show_hide_bucket_name()
    bucket_name = build_bucket_name();

    if($('.funding_bucket_name').is(":visible")){
      $('#funding_bucket_name').val(bucket_name+'-');
    } else {
      $('#funding_bucket_name').val(bucket_name)
    }
  }

  function show_hide_bucket_name(){
    if((multiple_buckets_for_agency_year) && ($('#funding_bucket_funding_template_id').val() > 0) && (($('#funding_bucket_owner_id').val() > 0) || (parseInt('#{@organization_list.count}')==1)) && ($('#funding_bucket_fy_year').val() > 0)){
      $('.funding_bucket_name').show();
    } else {
      $('.funding_bucket_name').hide();
    }
  }

  function build_bucket_name(){
    var template = $('#funding_bucket_funding_template_id option:selected').text();
    if (parseInt('#{@organization_list.count}') == 1) {
      var owner = '#{Organization.find_by(id: @organization_list).short_name}';
    } else {
      var owner = $('#funding_bucket_owner_id option:selected').text();
      var index_of_dash = owner.indexOf('-');
      owner = owner.substr(0, index_of_dash);
    }

    var fy = 'FYXX/ZZ';
    fy = $('#funding_bucket_fy_year option:selected').text();
    fy = fy.replace(" ", "");
    fy = fy.replace("-", "/");

    var text = template+'-'+owner+'-'+fy;

    return text;
  }

  function set_bucket_configuration_from_template(template_id, callback){
    var url = '#{find_configuration_options_from_template_id_funding_buckets_path}';
    $.ajax({
      url: url,
      data: {template_id: template_id},
      success: function(result){
        multiple_years = result.recurring;
        multiple_agencies = result.create_multiple_agencies;
        multiple_buckets_for_agency_year = result.create_multiple_buckets_for_agency_year;
        restricted = result.restricted;
        callback();
      },
      error: function (xhr, ajaxOptions, thrownError) {
        alert("We are sorry but something went wrong. " + xhr.status + " " + thrownError);
      }
    });
  }